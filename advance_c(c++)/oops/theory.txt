In C++, "Oops" usually refers to "Object-Oriented Programming" (OOP) concepts, which are fundamental to the language. Here's a brief overview of some key OOP principles in C++:

- class and object

A class is a blueprint for creating objects. It defines the properties (data members) and behaviors (member functions) that objects of that class will have.

syntax :

class ClassName{  // class defination
    // data member
    // member functions
}

 ClassName obj_name; // object defination


- Constructor and Desctructor

 A constructor is a special member function of a class that is automatically called when an object of that class is created. Its primary purpose is to initialize the object's data members or perform any necessary setup tasks. Constructors have the same name as the class and can be overloaded, meaning you can have multiple constructors with different parameter lists.


 syntax:

 class ClassName {
    public:
        // Default constructor
        ClassName() {
            // Constructor code here
        }

        // Parameterized constructor
        ClassName(parameter_list) {
            // Constructor code here
        }

        // Copy constructor
        ClassName(const ClassName &obj) {
            // Constructor code here
        }

        // Other constructors...
};


 A destructor, on the other hand, is also a special member function of a class, but it is called automatically when an object goes out of scope or is explicitly deleted. Its purpose is to release resources acquired by the object during its lifetime, such as memory allocated on the heap or file handles opened during the object's lifetime.

 syntax:

 class ClassName {
    public:
        // Destructor
        ~ClassName() {
            // Destructor code here
        }

        // Other member functions...
};



- encapsulation

Encapsulation is one of the four fundamental principles of object-oriented programming (OOP), along with inheritance, polymorphism, and abstraction. It refers to the bundling of data (attributes or properties) and methods (functions or procedures) that operate on the data into a single unit, known as a class. The data is hidden from the outside world and is only accessible through the methods defined in the class.


- abstraction

Abstract Classes: An abstract class is a class that cannot be instantiated on its own; it serves as a blueprint for other classes. It may contain abstract methods (methods without implementation) as well as concrete methods (methods with implementation). Abstract classes are used to define common behaviors and properties that subclasses can inherit and implement.

- inheritance

Inheritance is a fundamental feature of object-oriented programming (OOP). It allows a class (the subclass or derived class) to inherit properties and behaviors (methods and attributes) from another class (the superclass or base class).


In C++, inheritance is a fundamental feature of object-oriented programming (OOP). It allows a class (the subclass or derived class) to inherit properties and behaviors (methods and attributes) from another class (the superclass or base class).

Here's a basic explanation:

- Base Class (Superclass/Parentclass): This is the class whose members are inherited. It serves as a template for other classes. It defines common properties and behaviors.

- Derived Class (Subclass/Childclass): This is the class that inherits from the base class. It can access the members (methods and attributes) of the base class and can add its own unique members or behaviors.

Types of inheritance:
    - single
    - multilevel
    - multiple
    - hierarchical
    - hybrid

- polymorphisum

Polymorphism in C++ refers to the ability of different objects to respond to the same message in different ways. There are two main types of polymorphism in C++: compile-time (static) polymorphism and runtime (dynamic) polymorphism. 

1] Compile-Time (Static) Polymorphism:

Achieved through "function overloading" and "operator overloading".
Function overloading allows multiple functions with the same name but different parameter lists to coexist in the same scope.
Operator overloading allows operators such as +, -, *, etc., to be overloaded to work with user-defined types.

2] Runtime (Dynamic) Polymorphism:

Achieved through inheritance and virtual functions.
Virtual functions allow a base class pointer or reference to invoke methods of derived classes at runtime.
Requires the use of pointers or references to the base class.


friend function :

A friend function is a function that is not a member of a class but has access to the class's private and protected members. Friend functions are declared inside a class with the friend keyword, granting them access to private and protected members of that class.

Declaration: Friend functions are declared inside the class definition preceded by the friend keyword, but they are defined outside the class.

Access to Private Members: Friend functions can access private and protected members of the class in which they are declared as friends.
Not Inherited or Overloaded: Friend functions are not members of the class, so they are not inherited or overloaded.

Declaration Order: The friend function must be declared before it can be used in the class.

Usage: Friend functions are often used to allow certain external functions, such as overloaded operators or utility functions, to access private data members of a class without needing to make those members public.

inline fuhnction:

an inline function is a function that is expanded in place at the point of its call, rather than being executed through a function call mechanism. The inline keyword is used to declare a function as inline.